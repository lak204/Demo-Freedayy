// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String
  avatarUrl   String?
  phone       String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Quan hệ
  hostProfile Host?
  bookings    Booking[]
  preferences Preference?
  reviews     Review[]
}

model Host {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique @db.ObjectId
  bio             String?
  businessName    String?
  businessAddress String?
  businessPhone   String?
  cccdImageUrl    String?  // Ảnh CCCD để xác thực
  verified        Boolean  @default(false)

  events          Event[]
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  price       Float
  capacity    Int?
  startTime   DateTime
  endTime     DateTime
  location    Location
  tags        String[]
  featured    Boolean  @default(false)

  host        Host     @relation(fields: [hostId], references: [id])
  hostId      String   @db.ObjectId

  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([startTime], name: "idx_event_start")
}

type Location {
  address    String
  lat        Float
  lng        Float
  city       String
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  icon  String?
  events Event[]
}

model Booking {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  event     Event         @relation(fields: [eventId], references: [id])
  eventId   String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  status    BookingStatus @default(PENDING)
  paymentId String?
  createdAt DateTime      @default(now())

  @@index([userId, eventId], name: "idx_booking_user_event")
}

model Preference {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique @db.ObjectId
  favoredTags   String[]
  maxBudget     Float?
  radiusKm      Int?     // khoảng cách tìm kiếm tối đa
  weekendOnly   Boolean  @default(true)
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      // 1–5
  comment   String?
  createdAt DateTime @default(now())

  @@index([eventId])
}
